"use strict";

var acumGraph_01 = {

	graphWidth: 625,
	graphHeight: 130,
	
	dataAreaStart_x: 130,
	dataAreaStart_y: 5,
	dataAreaWidth: 490,
	dataAreaHeight: 120,
	
	draw: function() {
		
		var textSVG = "";
		
		var pointsPowerPWS = "";
		var pointsPowerPW = "";
		var pointsPowerP = "";
		
		textSVG += "<rect width='" + this.graphWidth + "' height='" + this.graphHeight + "' style='fill:rgb(255,255,255);stroke-width:1;stroke:rgb(211,211,211)' />";
		
		textSVG += "<rect x='" + this.dataAreaStart_x + "' y='" + this.dataAreaStart_y + "' width='" + this.dataAreaWidth + "' height='" + this.dataAreaHeight + "' style='fill:rgb(159,255,255);stroke-width:1;stroke:rgb(211,211,211)' />";
		
		var i = 0;
		
		var xAxis = this.dataAreaStart_x;
		
		var yAxis = this.dataAreaStart_y + (this.dataAreaHeight/2);
		var yAreaMax = this.dataAreaStart_y;
		var yAreaMin = this.dataAreaStart_y + this.dataAreaHeight;

		var yDataMax = acumVars.Power_MW_subavg_max ;
		var yDataMin = 0;
		
		var x = 0;
		var y = 0;
		
		var xDraw = 0;
		var yDraw = 0;
		
		var yCons = 0;
		var yPP = 0;
		var yPS = 0;
		var yPW = 0;
		
		var koef = (yAreaMin - yAreaMax)/yDataMax;
				
		xDraw = xAxis;
		yDraw = yAreaMin;

		pointsPowerPWS = xDraw.toFixed(0) + "," + yDraw.toFixed(0) + " ";
		pointsPowerPW = pointsPowerPWS;
		pointsPowerP = pointsPowerPWS;

		for ( i = 0; i < 490 ; i++) {
			
			yPP = koef*acumVars.arrPP_MW_subavg[i];
			yPW = koef*acumVars.arrPW_MW_subavg[i];
			yPS = koef*acumVars.arrPS_MW_subavg[i];

			xDraw = xAxis + x;
			
			
			yDraw = yAreaMin - yPP - yPW - yPS;
			
			pointsPowerPWS += xDraw.toFixed(0) + "," + yDraw.toFixed(0) + " ";
			
			
			yDraw = yAreaMin - yPP - yPW;
			
			pointsPowerPW += xDraw.toFixed(0) + "," + yDraw.toFixed(0) + " ";
			
			
			yDraw = yAreaMin - yPP;
			
			pointsPowerP += xDraw.toFixed(0) + "," + yDraw.toFixed(0) + " ";


			x++;
			
		};
		
		
		xDraw = xAxis + this.dataAreaWidth;
		
		yDraw = yAreaMin;
		
		pointsPowerPWS += xDraw.toFixed(0) + "," + yDraw.toFixed(0);

		pointsPowerPW += xDraw.toFixed(0) + "," + yDraw.toFixed(0);
		
		pointsPowerP += xDraw.toFixed(0) + "," + yDraw.toFixed(0);
		
		
		
		xDraw = xAxis;
		
		yCons = (yAreaMin - yAreaMax)*acumVars.cons_MW/yDataMax;

		yDraw = yAreaMin - yCons;

		
		textSVG += "<polygon points='" + pointsPowerPWS + "' style='fill:rgb(255,159,0);stroke:rgb(0,0,255);stroke-width:0' />";
		
		textSVG += "<polygon points='" + pointsPowerPW + "' style='fill:rgb(0,191,63);stroke:rgb(0,191,63);stroke-width:1' />";
		
		textSVG += "<polygon points='" + pointsPowerP + "' style='fill:rgb(255,0,0);stroke:rgb(255,0,0);stroke-width:1' />";
		
		
		/*
		<polygon points="220,10 300,210 170,250 123,234" style="fill:lime;stroke:purple;stroke-width:1" />
		*/
		
		textSVG += "<line x1='" + xDraw.toFixed(0) + "' y1='" + yDraw.toFixed(0) + "' x2='" + (xAxis + this.dataAreaWidth).toFixed(0) + "' y2='" + yDraw.toFixed(0) + "' style='stroke:rgb(255,0,255);stroke-width:1' />";
		
		
		document.getElementById("graph_01").innerHTML = textSVG;
		
	}

};

var acumGraph_06 = {

	graphWidth: 625,
	graphHeight: 130,
	
	dataAreaStart_x: 130,
	dataAreaStart_y: 5,
	dataAreaWidth: 490,
	dataAreaHeight: 120,
	
	textSVG: "",
	
	draw: function() {
		
		this.textSVG = "";
		
		this.textSVG += "<rect width='" + this.graphWidth + "' height='" + this.graphHeight + "' style='fill:rgb(255,255,255);stroke-width:1;stroke:rgb(211,211,211)' />";
		
		this.textSVG += "<rect x='" + this.dataAreaStart_x + "' y='" + this.dataAreaStart_y + "' width='" + this.dataAreaWidth + "' height='" + this.dataAreaHeight + "' style='fill:rgb(0,208,255);stroke-width:1;stroke:rgb(211,211,211)' />";
		
		var i = 0;
		
		var xAxis = this.dataAreaStart_x + 0.5;
		
		var yAxis = this.dataAreaStart_y + (this.dataAreaHeight/2) + 0.5;
		var yAreaMax = this.dataAreaStart_y;
		var yAreaMin = this.dataAreaStart_y + this.dataAreaHeight;

		var yDataMax = acumVars.Power_MW_subavg_max ;
		var yDataMin = 0;
		
		var x = 0;
		var y = 0;
		
		var xDrawFrom = 0;
		var yDrawFrom = 0;
		
		var xDrawTo = 0;
		var yDrawTo = 0;
		
		var yCons = 0;
		var yPP = 0;
		var yPS = 0;
		var yPW = 0;
		
		
		for ( i = 0; i < 490 ; i++) {
			
			xDrawFrom = xAxis + x;
			yDrawFrom = yAreaMin;
			
			xDrawTo = xDrawFrom;
			
			yPP = (yAreaMin - yAreaMax)*acumVars.arrPP_MW_subavg[i]/yDataMax;

			yDrawTo = yAreaMin - yPP;
			
			this.textSVG += "<line x1='" + xDrawFrom + "' y1='" + yDrawFrom + "' x2='" + xDrawTo + "' y2='" + yDrawTo + "' style='stroke:rgb(255,0,0);stroke-width:1' />";
			
			
			yDrawFrom = yDrawTo;

			yPW = (yAreaMin - yAreaMax)*acumVars.arrPW_MW_subavg[i]/yDataMax;
			
			yDrawTo = yAreaMin - yPP - yPW;
			
			this.textSVG += "<line x1='" + xDrawFrom + "' y1='" + yDrawFrom + "' x2='" + xDrawTo + "' y2='" + yDrawTo + "' style='stroke:rgb(0,191,63);stroke-width:1' />";
			

			yDrawFrom = yDrawTo;

			yPS = (yAreaMin - yAreaMax)*acumVars.arrPS_MW_subavg[i]/yDataMax;
			
			yDrawTo = yAreaMin - yPP - yPW - yPS;
			
			this.textSVG += "<line x1='" + xDrawFrom + "' y1='" + yDrawFrom + "' x2='" + xDrawTo + "' y2='" + yDrawTo + "' style='stroke:rgb(255,255,0);stroke-width:1' />";
			

			x++;
			
		};
		
		
		xDrawFrom = xAxis;
		
		yCons = (yAreaMin - yAreaMax)*acumVars.cons_MW/yDataMax;

		yDrawFrom = yAreaMin - yCons;

		xDrawTo = xAxis + this.dataAreaWidth;
		yDrawTo = yDrawFrom;
		
		this.textSVG += "<line x1='" + xDrawFrom + "' y1='" + yDrawFrom + "' x2='" + xDrawTo + "' y2='" + yDrawTo + "' style='stroke:rgb(255,0,255);stroke-width:1' />";
		
		
		document.getElementById("graph_06").innerHTML = this.textSVG;
		
	}

};

var acumInpOut = {

	in_permPower_MW: 1000,
	in_maxPeakSolar_MW: 8000,
	in_maxPeakWind_MW: 20000,
	in_cons_MW: 8000,
	
	in_totalCap_Days: 1,
	in_totalCap_MWh: 0,
	in_startCap_Percent: 50,
	in_startCap_MWh: 0,
	
	in_priceStorageMWh_Kc: 2000000,
	in_priceStorageTotal_Kc: 0,
	in_storageLifeTime_years: 30,
	in_priceStoragePerYear_Kc: 0,
	
	in_energyBuyed_Kc: 0,
	in_energySelled_Kc: 0,
	in_profitPerYear_Kc: 0,
	in_profitPercent: 0,
	
	in_kWhPriceIncrease_Kc: 0,
	in_MWhPriceProdEqCons_Kc: 1040,
	in_MWhPriceProdEqZero_Kc: 2080,
	in_MWhPriceProdEq2Cons_Kc: 0,
	
	initInput: function() {
		document.getElementById("inp_permPower_MW").value = this.in_permPower_MW;
		document.getElementById("inp_maxPeakSolar_MW").value = this.in_maxPeakSolar_MW;
		document.getElementById("inp_maxPeakWind_MW").value = this.in_maxPeakWind_MW;
		document.getElementById("inp_cons_MW").value = this.in_cons_MW;

		document.getElementById("inp_totalCap_Days").value = this.in_totalCap_Days;
		document.getElementById("inp_startCap_Percent").value = this.in_startCap_Percent;

		document.getElementById("inp_priceStorageMWh_Kc").value = this.in_priceStorageMWh_Kc;
		document.getElementById("inp_storageLifeTime_years").value = this.in_storageLifeTime_years;

		document.getElementById("inp_MWhPriceProdEqCons_Kc").value = this.in_MWhPriceProdEqCons_Kc;
		document.getElementById("inp_MWhPriceProdEqZero_Kc").value = this.in_MWhPriceProdEqZero_Kc;
		document.getElementById("inp_MWhPriceProdEq2Cons_Kc").value = this.in_MWhPriceProdEq2Cons_Kc;

	},
	
	refreshOutput: function() {
		document.getElementById("inp_totalCap_MWh").innerHTML = this.in_totalCap_MWh;
		document.getElementById("inp_startCap_MWh").innerHTML = this.in_startCap_MWh;
		
		document.getElementById("inp_priceStorageTotal_Kc").innerHTML = this.in_priceStorageTotal_Kc;
		document.getElementById("inp_priceStoragePerYear_Kc").innerHTML = this.in_priceStoragePerYear_Kc;
		
		document.getElementById("inp_energyBuyed_Kc").innerHTML = this.in_energyBuyed_Kc;
		document.getElementById("inp_energySelled_Kc").innerHTML = this.in_energySelled_Kc;
		document.getElementById("inp_profitPerYear_Kc").innerHTML = this.in_profitPerYear_Kc;
		document.getElementById("inp_profitPercent").innerHTML = this.in_profitPercent;

		document.getElementById("inp_kWhPriceIncrease_Kc").innerHTML = this.in_kWhPriceIncrease_Kc;

	},
	
	in_permPower_MW_Set: function() {
		var x = Number(document.getElementById("inp_permPower_MW").value);
		 
		if ( (x < 0) || (x > 100000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 0 a 100000.");
			
			document.getElementById("inp_permPower_MW").value = this.in_permPower_MW;
		} else {
		
			this.in_permPower_MW = x;
			
			this.refreshPage();
		};
	},
	
	in_maxPeakSolar_MW_Set: function() {
		var x = Number(document.getElementById("inp_maxPeakSolar_MW").value);
		
		if ( (x < 0) || (x > 100000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 0 a 100000.");

			document.getElementById("inp_maxPeakSolar_MW").value = this.in_maxPeakSolar_MW;
		} else {
			this.in_maxPeakSolar_MW = x;
			
			this.refreshPage();
		};
	},
	
	in_maxPeakWind_MW_Set: function() {
		var x = Number(document.getElementById("inp_maxPeakWind_MW").value);
		
		if ( (x < 0) || (x > 100000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 0 a 100000.");

			document.getElementById("inp_maxPeakWind_MW").value = this.in_maxPeakWind_MW;
		} else {
			this.in_maxPeakWind_MW = x;
			
			this.refreshPage();
		};
	},
	
	in_cons_MW_Set: function() {
		var x = Number(document.getElementById("inp_cons_MW").value);
		
		if ( (x < 1000) || (x > 100000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 1000 a 100000.");

			document.getElementById("inp_cons_MW").value = this.in_cons_MW;
		} else {
			this.in_cons_MW = x;
			
			this.refreshPage();
		};
	},
	
	in_totalCap_Days_Set: function() {
		var x = Number(document.getElementById("inp_totalCap_Days").value);
		
		if ( (x < 0.0001) || (x > 365) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 0.0001 a 365.");

			document.getElementById("inp_totalCap_Days").value = this.in_totalCap_Days;
		} else {
			this.in_totalCap_Days = x;
			
			this.refreshPage();
		};
	},
	
	in_startCap_Percent_Set: function() {
		var x = Number(document.getElementById("inp_startCap_Percent").value);
		
		if ( (x < 0) || (x > 100) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 0 a 100.");

			document.getElementById("inp_startCap_Percent").value = this.in_startCap_Percent;
		} else {
			this.in_startCap_Percent = x;
			
			this.refreshPage();
		};
	},
	
	in_priceStorageMWh_Kc_Set: function() {
		var x = Number(document.getElementById("inp_priceStorageMWh_Kc").value);
		
		if ( (x < 100000) || (x > 5000000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 100000 a 5000000.");

			document.getElementById("inp_priceStorageMWh_Kc").value = this.in_priceStorageMWh_Kc;
		} else {
			this.in_priceStorageMWh_Kc = x;
			
			this.refreshPage();
		};
	},
	
	in_storageLifeTime_years_Set: function() {
		var x = Number(document.getElementById("inp_storageLifeTime_years").value);
		
		if ( (x < 10) || (x > 50) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 10 a 50.");

			document.getElementById("inp_storageLifeTime_years").value = this.in_storageLifeTime_years;
		} else {
			this.in_storageLifeTime_years = x;
			
			this.refreshPage();
		};
	},
	
	in_MWhPriceProdEq2Cons_Kc_Set: function() {
		var x = Number(document.getElementById("inp_MWhPriceProdEq2Cons_Kc").value);
		
		if ( (x < -1000) || (x > 10000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi -1000 a 10000.");

			document.getElementById("inp_MWhPriceProdEq2Cons_Kc").value = this.in_MWhPriceProdEq2Cons_Kc;
		} else {
			this.in_MWhPriceProdEq2Cons_Kc = x;
			
			this.refreshPage();
		};
	},

	in_MWhPriceProdEqCons_Kc_Set: function() {
		var x = Number(document.getElementById("inp_MWhPriceProdEqCons_Kc").value);
		
		if ( (x < 100) || (x > 10000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 100 a 10000.");

			document.getElementById("inp_MWhPriceProdEqCons_Kc").value = this.in_MWhPriceProdEqCons_Kc;
		} else {
			this.in_MWhPriceProdEqCons_Kc = x;
			
			this.refreshPage();
		};
	},
	
	in_MWhPriceProdEqZero_Kc_Set: function() {
		var x = Number(document.getElementById("inp_MWhPriceProdEqZero_Kc").value);
		
		if ( (x < 100) || (x > 10000) || (isNaN(x))) {
			alert("Hodnota musí být číslo mezi 100 a 10000.");

			document.getElementById("inp_MWhPriceProdEqZero_Kc").value = this.in_MWhPriceProdEqZero_Kc;
		} else {
			this.in_MWhPriceProdEqZero_Kc = x;
			
			this.refreshPage();
		};
	},
	
	refreshPage: function() {
		acumVars.importInput();
		acumVars.recalculate();
		acumVars.exportOutput();
		acumVars.refreshTab();

		this.refreshOutput();
		
		acumGraph_01.draw();
		acumGraph_06.draw();
	}
	
};

var acumVars = {
	cteTabAvgHead: "<tr><th> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </th><th>Stálé [MW]</th><th>Solární [MW]</th><th>Větrné [MW]</th><th>Celkem [MW]</th><th>Spotřeba [MW]</th><th>Nadvýroba [MW]</th><th>Cena [Kč/MWh]</th><th>Akumul. [MWh]</th><th>Nevyužito [MW]</th><th>Deficit [MW]</th><th>Deficit [h]</th><th>Nákup [MWh]</th><th>Nákup [Kč]</th><th>Prodej [MWh]</th><th>Prodej [Kč]</th></tr>",
	cteTabAvgDet: "<td>Průměr &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </td>",
	cteTabMaxDet: "<td>Maximum &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </td>",
	cteTabMinDet: "<td>Minimum &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </td>",
	cteTabSumDet: "<td>Součet &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </td>",
	cteTabHeadArr: "<tr><th>Datum &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </th><th>Stálé [MW]</th><th>Solární [MW]</th><th>Větrné [MW]</th><th>Celkem [MW]</th><th>Spotřeba [MW]</th><th>Nadvýroba [MW]</th><th>Cena [Kč/MWh]</th><th>Akumul. [MWh]</th><th>Nevyužito [MW]</th><th>Deficit [MW]</th><th>Deficit [h]</th><th>Nákup [MWh]</th><th>Nákup [Kč]</th><th>Prodej [MWh]</th><th>Prodej [Kč]</th></tr>",
	
	textTabAvgDet: "",
	textTabMaxDet: "",
	textTabMinDet: "",
	textTabSumDet: "",
	textTabDetArr: "",
	
	permPower_MW: 0,
	maxPeakSolar_MW: 0,
	maxPeakWind_MW: 0,
	cons_MW: 0,

	totalCap_Days: 0,
	totalCap_MWh: 0,
	startCap_Percent: 0,
	startCap_MWh: 0,
	
	priceStorageMWh_Kc: 0,
	priceStorageTotal_Kc: 0,
	storageLifeTime_years: 0,
	priceStoragePerYear_Kc: 0,
	
	energyBuyed_Kc: 0,
	energySelled_Kc: 0,
	profitPerYear_Kc: 0,
	profitPercent: 0,
	
	kWhPriceIncrease_Kc: 0,
	MWhPriceProdEqCons_Kc: 0,
	MWhPriceProdEqZero_Kc: 0,
	MWhPriceProdEq2Cons_Kc: 0,
	
	dDateStart: new Date(2018,1,1),
	
	arrDate: ['01.01.2018 00:00', '01.01.2018 01:00', '01.01.2018 02:00', '01.01.2018 02:59', '01.01.2018 04:00', '01.01.2018 05:00', '01.01.2018 05:59', '01.01.2018 07:00', '01.01.2018 08:00', '01.01.2018 08:59', '01.01.2018 10:00', '01.01.2018 11:00', '01.01.2018 11:59', '01.01.2018 13:00', '01.01.2018 14:00', '01.01.2018 14:59', '01.01.2018 16:00', '01.01.2018 17:00', '01.01.2018 17:59', '01.01.2018 19:00', '01.01.2018 20:00', '01.01.2018 20:59', '01.01.2018 22:00', '01.01.2018 23:00', '01.01.2018 23:59', '02.01.2018 01:00', '02.01.2018 02:00', '02.01.2018 02:59', '02.01.2018 04:00', '02.01.2018 05:00', '02.01.2018 05:59', '02.01.2018 07:00', '02.01.2018 08:00', '02.01.2018 08:59', '02.01.2018 10:00', '02.01.2018 11:00', '02.01.2018 11:59', '02.01.2018 13:00', '02.01.2018 14:00', '02.01.2018 14:59', '02.01.2018 16:00', '02.01.2018 17:00', '02.01.2018 17:59', '02.01.2018 18:59', '02.01.2018 19:59', '02.01.2018 20:59', '02.01.2018 22:00', '02.01.2018 23:00', '02.01.2018 23:59', '03.01.2018 01:00', '03.01.2018 02:00', '03.01.2018 02:59', '03.01.2018 04:00', '03.01.2018 05:00', '03.01.2018 05:59', '03.01.2018 07:00', '03.01.2018 08:00', '03.01.2018 08:59', '03.01.2018 10:00', '03.01.2018 11:00', '03.01.2018 11:59', '03.01.2018 13:00', '03.01.2018 14:00', '03.01.2018 14:59', '03.01.2018 16:00', '03.01.2018 17:00', '03.01.2018 17:59', '03.01.2018 19:00', '03.01.2018 20:00', '03.01.2018 20:59', '03.01.2018 22:00', '03.01.2018 23:00', '03.01.2018 23:59', '04.01.2018 01:00', '04.01.2018 02:00', '04.01.2018 02:59', '04.01.2018 04:00', '04.01.2018 05:00', '04.01.2018 05:59', '04.01.2018 07:00', '04.01.2018 08:00', '04.01.2018 08:59', '04.01.2018 10:00', '04.01.2018 11:00', '04.01.2018 11:59', '04.01.2018 12:59', '04.01.2018 13:59', '04.01.2018 14:59', '04.01.2018 15:59', '04.01.2018 17:00', '04.01.2018 17:59', '04.01.2018 19:00', '04.01.2018 20:00', '04.01.2018 20:59', '04.01.2018 22:00', '04.01.2018 23:00', '04.01.2018 23:59', '05.01.2018 01:00', '05.01.2018 02:00', '05.01.2018 02:59', '05.01.2018 04:00', '05.01.2018 05:00', '05.01.2018 05:59', '05.01.2018 07:00', '05.01.2018 08:00', '05.01.2018 08:59', '05.01.2018 10:00', '05.01.2018 11:00', '05.01.2018 11:59', '05.01.2018 13:00', '05.01.2018 14:00', '05.01.2018 14:59', '05.01.2018 16:00', '05.01.2018 17:00', '05.01.2018 17:59', '05.01.2018 19:00', '05.01.2018 20:00', '05.01.2018 20:59', '05.01.2018 22:00', '05.01.2018 23:00', '05.01.2018 23:59', '06.01.2018 01:00', '06.01.2018 02:00', '06.01.2018 02:59', '06.01.2018 04:00', '06.01.2018 05:00', '06.01.2018 05:59', '06.01.2018 07:00', '06.01.2018 08:00', '06.01.2018 08:59', '06.01.2018 09:59', '06.01.2018 10:59', '06.01.2018 11:59', '06.01.2018 12:59', '06.01.2018 14:00', '06.01.2018 14:59', '06.01.2018 16:00', '06.01.2018 17:00', '06.01.2018 17:59', '06.01.2018 19:00', '06.01.2018 20:00', '06.01.2018 20:59', '06.01.2018 22:00', '06.01.2018 23:00', '06.01.2018 23:59', '07.01.2018 01:00', '07.01.2018 02:00', '07.01.2018 02:59', '07.01.2018 04:00', '07.01.2018 05:00', '07.01.2018 05:59', '07.01.2018 07:00', '07.01.2018 08:00', '07.01.2018 08:59', '07.01.2018 10:00', '07.01.2018 11:00', '07.01.2018 11:59', '07.01.2018 13:00', '07.01.2018 14:00', '07.01.2018 14:59', '07.01.2018 16:00', '07.01.2018 17:00', '07.01.2018 17:59', '07.01.2018 19:00', '07.01.2018 20:00', '07.01.2018 20:59', '07.01.2018 22:00', '07.01.2018 23:00', '07.01.2018 23:59', '08.01.2018 01:00', '08.01.2018 02:00', '08.01.2018 02:59', '08.01.2018 03:59', '08.01.2018 04:59', '08.01.2018 05:59', '08.01.2018 06:59', '08.01.2018 08:00', '08.01.2018 08:59', '08.01.2018 10:00', '08.01.2018 11:00', '08.01.2018 11:59', '08.01.2018 13:00', '08.01.2018 14:00', '08.01.2018 14:59', '08.01.2018 16:00', '08.01.2018 17:00', '08.01.2018 17:59', '08.01.2018 19:00', '08.01.2018 20:00', '08.01.2018 20:59', '08.01.2018 22:00', '08.01.2018 23:00', '08.01.2018 23:59', '09.01.2018 01:00', '09.01.2018 02:00', '09.01.2018 02:59', '09.01.2018 04:00', '09.01.2018 05:00', '09.01.2018 05:59', '09.01.2018 07:00', '09.01.2018 08:00', '09.01.2018 08:59', '09.01.2018 10:00', '09.01.2018 11:00', '09.01.2018 11:59', '09.01.2018 13:00', '09.01.2018 14:00', '09.01.2018 14:59', '09.01.2018 16:00', '09.01.2018 17:00', '09.01.2018 17:59', '09.01.2018 19:00', '09.01.2018 20:00', '09.01.2018 20:59', '09.01.2018 22:00', '09.01.2018 23:00', '09.01.2018 23:59', '10.01.2018 00:59', '10.01.2018 01:59', '10.01.2018 02:59', '10.01.2018 04:00', '10.01.2018 05:00', '10.01.2018 05:59', '10.01.2018 07:00', '10.01.2018 08:00', '10.01.2018 08:59', '10.01.2018 10:00', '10.01.2018 11:00', '10.01.2018 11:59', '10.01.2018 13:00', '10.01.2018 14:00', '10.01.2018 14:59', '10.01.2018 16:00', '10.01.2018 17:00', '10.01.2018 17:59', '10.01.2018 19:00', '10.01.2018 20:00', '10.01.2018 20:59', '10.01.2018 22:00', '10.01.2018 23:00', '10.01.2018 23:59', '11.01.2018 01:00', '11.01.2018 02:00', '11.01.2018 02:59', '11.01.2018 04:00', '11.01.2018 05:00', '11.01.2018 05:59', '11.01.2018 07:00', '11.01.2018 08:00', '11.01.2018 08:59', '11.01.2018 10:00', '11.01.2018 11:00', '11.01.2018 11:59', '11.01.2018 13:00', '11.01.2018 14:00', '11.01.2018 14:59', '11.01.2018 16:00', '11.01.2018 16:59', '11.01.2018 17:59', '11.01.2018 18:59', '11.01.2018 19:59', '11.01.2018 20:59', '11.01.2018 22:00', '11.01.2018 23:00', '11.01.2018 23:59', '12.01.2018 01:00', '12.01.2018 02:00', '12.01.2018 02:59', '12.01.2018 04:00', '12.01.2018 05:00', '12.01.2018 05:59', '12.01.2018 07:00', '12.01.2018 08:00', '12.01.2018 08:59', '12.01.2018 10:00', '12.01.2018 11:00', '12.01.2018 11:59', '12.01.2018 13:00', '12.01.2018 14:00', '12.01.2018 14:59', '12.01.2018 16:00', '12.01.2018 17:00', '12.01.2018 17:59', '12.01.2018 19:00', '12.01.2018 20:00', '12.01.2018 20:59', '12.01.2018 22:00', '12.01.2018 23:00', '12.01.2018 23:59', '13.01.2018 01:00', '13.01.2018 02:00', '13.01.2018 02:59', '13.01.2018 04:00', '13.01.2018 05:00', '13.01.2018 05:59', '13.01.2018 07:00', '13.01.2018 08:00', '13.01.2018 08:59', '13.01.2018 10:00', '13.01.2018 11:00', '13.01.2018 11:59', '13.01.2018 13:00', '13.01.2018 13:59', '13.01.2018 14:59', '13.01.2018 15:59', '13.01.2018 16:59', '13.01.2018 17:59', '13.01.2018 19:00', '13.01.2018 20:00', '13.01.2018 20:59', '13.01.2018 22:00', '13.01.2018 23:00', '13.01.2018 23:59', '14.01.2018 01:00', '14.01.2018 02:00', '14.01.2018 02:59', '14.01.2018 04:00', '14.01.2018 05:00', '14.01.2018 05:59', '14.01.2018 07:00', '14.01.2018 08:00', '14.01.2018 08:59', '14.01.2018 10:00', '14.01.2018 11:00', '14.01.2018 11:59', '14.01.2018 13:00', '14.01.2018 14:00', '14.01.2018 14:59', '14.01.2018 16:00', '14.01.2018 17:00', '14.01.2018 17:59', '14.01.2018 19:00', '14.01.2018 20:00', '14.01.2018 20:59', '14.01.2018 22:00', '14.01.2018 23:00', '14.01.2018 23:59', '15.01.2018 01:00', '15.01.2018 02:00', '15.01.2018 02:59', '15.01.2018 04:00', '15.01.2018 05:00', '15.01.2018 05:59', '15.01.2018 07:00', '15.01.2018 08:00', '15.01.2018 08:59', '15.01.2018 10:00', '15.01.2018 10:59', '15.01.2018 11:59', '15.01.2018 13:00', '15.01.2018 14:00', '15.01.2018 14:59', '15.01.2018 16:00', '15.01.2018 17:00', '15.01.2018 17:59', '15.01.2018 19:00', '15.01.2018 20:00', '15.01.2018 20:59', '15.01.2018 22:00', '15.01.2018 23:00', '15.01.2018 23:59', '16.01.2018 01:00', '16.01.2018 02:00', '16.01.2018 02:59', '16.01.2018 04:00', '16.01.2018 05:00', '16.01.2018 05:59', '16.01.2018 07:00', '16.01.2018 08:00', '16.01.2018 08:59', '16.01.2018 10:00', '16.01.2018 11:00', '16.01.2018 11:59', '16.01.2018 13:00', '16.01.2018 14:00', '16.01.2018 14:59', '16.01.2018 16:00', '16.01.2018 17:00', '16.01.2018 17:59', '16.01.2018 19:00', '16.01.2018 20:00', '16.01.2018 20:59', '16.01.2018 22:00', '16.01.2018 23:00', '16.01.2018 23:59', '17.01.2018 01:00', '17.01.2018 02:00', '17.01.2018 02:59', '17.01.2018 04:00', '17.01.2018 04:59', '17.01.2018 05:59', '17.01.2018 06:59', '17.01.2018 07:59', '17.01.2018 08:59', '17.01.2018 10:00', '17.01.2018 11:00', '17.01.2018 11:59', '17.01.2018 13:00', '17.01.2018 14:00', '17.01.2018 14:59', '17.01.2018 16:00', '17.01.2018 17:00', '17.01.2018 17:59', '17.01.2018 19:00', '17.01.2018 20:00', '17.01.2018 20:59', '17.01.2018 22:00', '17.01.2018 23:00', '17.01.2018 23:59', '18.01.2018 01:00', '18.01.2018 02:00', '18.01.2018 02:59', '18.01.2018 04:00', '18.01.2018 05:00', '18.01.2018 05:59', '18.01.2018 07:00', '18.01.2018 08:00', '18.01.2018 08:59', '18.01.2018 10:00', '18.01.2018 11:00', '18.01.2018 11:59', '18.01.2018 13:00', '18.01.2018 14:00', '18.01.2018 14:59', '18.01.2018 16:00', '18.01.2018 17:00', '18.01.2018 17:59', '18.01.2018 19:00', '18.01.2018 20:00', '18.01.2018 20:59', '18.01.2018 22:00', '18.01.2018 23:00', '18.01.2018 23:59', '19.01.2018 00:59', '19.01.2018 01:59', '19.01.2018 02:59', '19.01.2018 03:59', '19.01.2018 04:59', '19.01.2018 05:59', '19.01.2018 07:00', '19.01.2018 08:00', '19.01.2018 08:59', '19.01.2018 10:00', '19.01.2018 11:00', '19.01.2018 11:59', '19.01.2018 13:00', '19.01.2018 14:00', '19.01.2018 14:59', '19.01.2018 16:00', '19.01.2018 17:00', '19.01.2018 17:59', '19.01.2018 19:00', '19.01.2018 20:00', '19.01.2018 20:59', '19.01.2018 22:00', '19.01.2018 23:00', '19.01.2018 23:59', '20.01.2018 01:00', '20.01.2018 02:00', '20.01.2018 02:59', '20.01.2018 04:00', '20.01.2018 05:00', '20.01.2018 05:59', '20.01.2018 07:00', '20.01.2018 08:00', '20.01.2018 08:59', '20.01.2018 10:00', '20.01.2018 11:00', '20.01.2018 11:59', '20.01.2018 13:00', '20.01.2018 14:00', '20.01.2018 14:59', '20.01.2018 16:00', '20.01.2018 17:00', '20.01.2018 17:59', '20.01.2018 18:59', '20.01.2018 19:59', '20.01.2018 20:59', '20.01.2018 21:59', '20.01.2018 22:59', '20.01.2018 23:59', '21.01.2018 01:00', '21.01.2018 02:00', '21.01.2018 02:59', '21.01.2018 04:00', '21.01.2018 05:00', '21.01.2018 05:59', '21.01.2018 07:00', '21.01.2018 08:00', '21.01.2018 08:59'],
	arrPS0_MW: [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.005995, 0.054047, 0.139405, 0.207213, 0.221346, 0.196341, 0.139125, 0.053457, 0.001429, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.002796, 0.031310, 0.076070, 0.109027, 0.118500, 0.112040, 0.082593, 0.030006, 0.001398, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.001957, 0.024694, 0.049854, 0.080947, 0.101106, 0.093993, 0.068118, 0.029943, 0.001895, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.001802, 0.021184, 0.052122, 0.070634, 0.071380, 0.055538, 0.035504, 0.011524, 0.000248, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.008759, 0.053861, 0.122756, 0.151798, 0.129993, 0.092750, 0.053550, 0.020190, 0.001149, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.008728, 0.072125, 0.156240, 0.210940, 0.214698, 0.179381, 0.117165, 0.044667, 0.002951, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003448, 0.029819, 0.075946, 0.113375, 0.130242, 0.118345, 0.083214, 0.031341, 0.001429, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.004442, 0.048829, 0.128595, 0.198608, 0.231938, 0.218643, 0.154656, 0.059483, 0.003727, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.007206, 0.060353, 0.133565, 0.192986, 0.218364, 0.208766, 0.139809, 0.052246, 0.003852, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.008822, 0.069268, 0.170467, 0.255296, 0.297074, 0.264863, 0.171398, 0.065540, 0.003821, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003883, 0.039107, 0.097037, 0.144126, 0.164503, 0.140399, 0.090638, 0.038827, 0.003603, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.002827, 0.019289, 0.047555, 0.069640, 0.081910, 0.076163, 0.056905, 0.026185, 0.002796, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.002951, 0.025408, 0.057868, 0.085358, 0.087159, 0.073119, 0.046655, 0.019072, 0.001926, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.007672, 0.060695, 0.145244, 0.222340, 0.252594, 0.229453, 0.157731, 0.065851, 0.006616, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.009256, 0.075138, 0.159781, 0.217773, 0.231907, 0.188513, 0.114959, 0.044667, 0.003727, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003603, 0.037709, 0.080636, 0.120830, 0.139715, 0.121731, 0.087066, 0.043859, 0.005312, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003572, 0.030472, 0.082935, 0.131174, 0.139840, 0.129248, 0.091197, 0.037771, 0.005218, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.001771, 0.018016, 0.051314, 0.089023, 0.108033, 0.113530, 0.101758, 0.054265, 0.008325, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.005249, 0.050165, 0.124713, 0.173480, 0.184413, 0.172361, 0.128533, 0.068429, 0.009101, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.005933, 0.037274, 0.076878, 0.104150, 0.112536, 0.090607, 0.061875, 0.026216, 0.003044, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003634, 0.032242],
	arrPW0_MW: [0.555083, 0.570795, 0.588909, 0.596858, 0.611275, 0.624399, 0.626248, 0.624399, 0.624954, 0.623475, 0.608133, 0.618854, 0.625693, 0.625139, 0.624030, 0.805176, 0.762292, 0.701664, 0.619593, 0.590573, 0.543993, 0.486322, 0.446211, 0.370055, 0.288725, 0.306654, 0.291682, 0.323845, 0.344547, 0.368022, 0.411830, 0.408318, 0.411645, 0.369501, 0.335305, 0.431238, 0.518484, 0.489464, 0.435675, 0.482994, 0.569686, 0.606285, 0.698336, 0.780591, 0.801664, 0.802033, 0.810351, 0.816081, 0.819778, 0.833087, 0.838632, 0.841220, 0.845287, 0.806285, 0.786322, 0.794824, 0.795009, 0.794824, 0.793161, 0.701109, 0.684288, 0.512200, 0.535860, 0.559335, 0.554344, 0.698152, 0.745656, 0.707024, 0.701109, 0.693161, 0.716821, 0.730499, 0.696118, 0.680407, 0.649723, 0.639741, 0.517375, 0.356377, 0.289094, 0.221996, 0.209427, 0.198521, 0.155268, 0.165804, 0.189094, 0.157116, 0.116081, 0.100370, 0.077079, 0.082810, 0.115527, 0.148244, 0.212754, 0.249538, 0.358965, 0.525508, 0.669501, 0.737893, 0.656932, 0.561368, 0.503142, 0.362662, 0.257856, 0.165619, 0.106839, 0.045841, 0.043068, 0.033087, 0.027357, 0.056007, 0.081701, 0.083734, 0.084104, 0.073937, 0.145656, 0.181885, 0.126063, 0.099261, 0.104991, 0.084658, 0.084843, 0.098152, 0.127172, 0.135675, 0.072089, 0.082994, 0.092237, 0.114418, 0.114787, 0.112015, 0.090018, 0.068577, 0.053235, 0.075601, 0.109797, 0.112200, 0.235305, 0.338447, 0.430314, 0.460444, 0.597043, 0.641774, 0.670610, 0.636599, 0.588355, 0.559150, 0.526802, 0.453420, 0.399445, 0.335120, 0.274677, 0.250832, 0.218299, 0.183919, 0.139926, 0.128281, 0.128651, 0.120702, 0.126433, 0.129575, 0.153789, 0.190388, 0.211091, 0.238632, 0.260813, 0.280037, 0.280776, 0.275601, 0.279113, 0.312015, 0.334935, 0.368762, 0.386322, 0.424954, 0.484473, 0.544732, 0.474122, 0.466728, 0.444917, 0.445841, 0.472089, 0.496303, 0.516451, 0.582070, 0.617560, 0.631978, 0.611645, 0.615712, 0.615527, 0.621627, 0.626433, 0.634011, 0.639372, 0.637338, 0.641220, 0.649723, 0.653235, 0.664140, 0.663586, 0.660628, 0.659889, 0.658965, 0.654898, 0.656007, 0.658965, 0.675970, 0.673937, 0.692976, 0.690388, 0.678004, 0.641774, 0.662107, 0.608872, 0.514418, 0.435860, 0.361922, 0.307763, 0.282625, 0.256007, 0.227542, 0.206100, 0.185028, 0.173198, 0.188540, 0.176340, 0.162107, 0.146580, 0.128096, 0.128096, 0.128651, 0.150647, 0.191682, 0.242329, 0.259889, 0.267283, 0.287985, 0.290018, 0.235120, 0.187246, 0.141959, 0.103882, 0.097597, 0.098336, 0.100185, 0.068946, 0.041405, 0.024399, 0.028651, 0.043438, 0.054344, 0.052680, 0.042699, 0.044362, 0.050277, 0.059150, 0.069316, 0.099630, 0.131793, 0.135305, 0.147689, 0.141959, 0.127357, 0.143253, 0.153050, 0.166174, 0.165250, 0.193715, 0.203512, 0.231608, 0.254898, 0.300370, 0.372274, 0.373937, 0.335490, 0.315712, 0.323105, 0.387246, 0.451571, 0.481516, 0.502773, 0.521072, 0.539556, 0.554344, 0.573013, 0.569501, 0.558965, 0.531978, 0.520702, 0.533826, 0.530499, 0.490018, 0.447874, 0.430129, 0.461368, 0.462292, 0.475416, 0.484288, 0.519963, 0.568392, 0.575601, 0.565065, 0.562662, 0.586876, 0.617190, 0.677264, 0.730869, 0.743068, 0.718669, 0.696303, 0.683919, 0.688540, 0.690388, 0.665804, 0.677634, 0.672089, 0.640850, 0.652311, 0.682625, 0.713494, 0.729020, 0.653974, 0.656562, 0.660074, 0.634750, 0.636599, 0.620148, 0.583734, 0.533272, 0.560628, 0.673198, 0.713124, 0.598521, 0.497043, 0.479298, 0.487616, 0.500924, 0.577079, 0.638078, 0.658595, 0.737708, 0.763031, 0.763956, 0.640481, 0.621442, 0.687616, 0.685397, 0.672089, 0.669131, 0.675601, 0.687616, 0.689464, 0.683734, 0.685952, 0.688355, 0.690573, 0.690573, 0.689834, 0.682255, 0.657116, 0.614603, 0.635860, 0.646396, 0.684473, 0.692237, 0.678373, 0.775970, 0.758410, 0.702773, 0.730684, 0.726063, 0.698152, 0.691312, 0.713124, 0.709242, 0.714233, 0.746765, 0.752126, 0.746580, 0.774122, 0.746211, 0.720518, 0.714603, 0.704621, 0.685767, 0.565619, 0.524399, 0.408503, 0.511460, 0.431608, 0.544177, 0.540850, 0.616266, 0.667098, 0.666913, 0.612200, 0.556377, 0.580037, 0.641590, 0.679298, 0.751201, 0.800555, 0.785028, 0.809057, 0.803882, 0.799076, 0.805545, 0.811645, 0.774492, 0.760813, 0.727911, 0.711091, 0.680037, 0.657856, 0.644732, 0.614418, 0.564140, 0.603882, 0.643438, 0.688725, 0.612384, 0.547689, 0.476895, 0.393161, 0.423105, 0.324030, 0.293161, 0.284473, 0.303512, 0.414603, 0.382255, 0.338262, 0.258041, 0.281146, 0.181516, 0.187800, 0.192052, 0.191682, 0.158226, 0.141405, 0.177079, 0.189834, 0.208318, 0.222736, 0.240296, 0.261553, 0.266359, 0.290758, 0.310351, 0.421442, 0.465619, 0.484473, 0.448429, 0.428096, 0.352311, 0.314418, 0.387616, 0.371534, 0.350462, 0.351571, 0.334750, 0.428096, 0.485952, 0.510906, 0.487616, 0.444732, 0.452680, 0.421257, 0.366359, 0.376340, 0.306470, 0.266359, 0.211275, 0.182810, 0.152495, 0.166913, 0.125693, 0.116266, 0.076155, 0.047505, 0.054713, 0.049353, 0.066359, 0.052311, 0.091682, 0.092606, 0.096303, 0.117375, 0.103142, 0.073937, 0.063216],
    arrCons0_MW: [0.591259, 0.584366, 0.584111, 0.591329, 0.595685, 0.604930, 0.595013, 0.601281, 0.606923, 0.632400, 0.658016, 0.679982, 0.677769, 0.655895, 0.657239, 0.650357, 0.648620, 0.682716, 0.692796, 0.679009, 0.652443, 0.630616, 0.626920, 0.616145, 0.603668, 0.592812, 0.589823, 0.588583, 0.607132, 0.626503, 0.684303, 0.731074, 0.775598, 0.801086, 0.821859, 0.838264, 0.839469, 0.826818, 0.813518, 0.812475, 0.821616, 0.851820, 0.846270, 0.845065, 0.796788, 0.763781, 0.735234, 0.690560, 0.688567, 0.687686, 0.681581, 0.695310, 0.716338, 0.728224, 0.781078, 0.814885, 0.862722, 0.883831, 0.893006, 0.903897, 0.898463, 0.892265, 0.881884, 0.870044, 0.870959, 0.908763, 0.919398, 0.890122, 0.848506, 0.832472, 0.800461, 0.768426, 0.741038, 0.716245, 0.707614, 0.718353, 0.719778, 0.727228, 0.775413, 0.820145, 0.844057, 0.852804, 0.871527, 0.887017, 0.819762, 0.798642, 0.784148, 0.778599, 0.791157, 0.811641, 0.802998, 0.798178, 0.758347, 0.731631, 0.717983, 0.677896, 0.677085, 0.679310, 0.667238, 0.674131, 0.692066, 0.700616, 0.730009, 0.763989, 0.810053, 0.858922, 0.875026, 0.879405, 0.877482, 0.858887, 0.838832, 0.839388, 0.842899, 0.859234, 0.852329, 0.835020, 0.787994, 0.763074, 0.744572, 0.703941, 0.673459, 0.664098, 0.652675, 0.653254, 0.655814, 0.651389, 0.637776, 0.644078, 0.669277, 0.703165, 0.724749, 0.736450, 0.738512, 0.720960, 0.708054, 0.704022, 0.724807, 0.760641, 0.761232, 0.740528, 0.715214, 0.697453, 0.672312, 0.641159, 0.618694, 0.603702, 0.597991, 0.615311, 0.614755, 0.611511, 0.610642, 0.621729, 0.639548, 0.657390, 0.682033, 0.714206, 0.722258, 0.705980, 0.692529, 0.689737, 0.702701, 0.744259, 0.755983, 0.743320, 0.717589, 0.700836, 0.699307, 0.667330, 0.667423, 0.666172, 0.660159, 0.666230, 0.677630, 0.698067, 0.776780, 0.855515, 0.886368, 0.887909, 0.901916, 0.910327, 0.900491, 0.887689, 0.875083, 0.871086, 0.882371, 0.914139, 0.905380, 0.897467, 0.856894, 0.845459, 0.817445, 0.780360, 0.737053, 0.717925, 0.727668, 0.730240, 0.743332, 0.758104, 0.825567, 0.882649, 0.900213, 0.909122, 0.922724, 0.935931, 0.930289, 0.916317, 0.895161, 0.888812, 0.896494, 0.920209, 0.915297, 0.898475, 0.862988, 0.824431, 0.782422, 0.750191, 0.720601, 0.700593, 0.697279, 0.707289, 0.716639, 0.728537, 0.794900, 0.864054, 0.883576, 0.882394, 0.887144, 0.896366, 0.889890, 0.877713, 0.860266, 0.853627, 0.854600, 0.883321, 0.885580, 0.877934, 0.840385, 0.805280, 0.772887, 0.732546, 0.703547, 0.692205, 0.690119, 0.702771, 0.717855, 0.732001, 0.777475, 0.839110, 0.860381, 0.869870, 0.878200, 0.890805, 0.885928, 0.885429, 0.867634, 0.862432, 0.858331, 0.880726, 0.873693, 0.858087, 0.817781, 0.786952, 0.761637, 0.710915, 0.701438, 0.685636, 0.683342, 0.694116, 0.713893, 0.727332, 0.779873, 0.847579, 0.874018, 0.881386, 0.902773, 0.895196, 0.891744, 0.883031, 0.868225, 0.856755, 0.856929, 0.879544, 0.871249, 0.847568, 0.806983, 0.772562, 0.748835, 0.719466, 0.682276, 0.659336, 0.642375, 0.645329, 0.649848, 0.645851, 0.659093, 0.694336, 0.731897, 0.762008, 0.787519, 0.798479, 0.794343, 0.773976, 0.757791, 0.760328, 0.772609, 0.798178, 0.801723, 0.781205, 0.743784, 0.728491, 0.706073, 0.667018, 0.632168, 0.633651, 0.626723, 0.624649, 0.629272, 0.627522, 0.623548, 0.625599, 0.637764, 0.668095, 0.702643, 0.741478, 0.738107, 0.716534, 0.697754, 0.681453, 0.691846, 0.749194, 0.772412, 0.750225, 0.722200, 0.719385, 0.724459, 0.689633, 0.676889, 0.668837, 0.671907, 0.683261, 0.693097, 0.727089, 0.796000, 0.868341, 0.895752, 0.895115, 0.914475, 0.924369, 0.919676, 0.907871, 0.896192, 0.897768, 0.895845, 0.931598, 0.924890, 0.906898, 0.891941, 0.886785, 0.851773, 0.806114, 0.775922, 0.758312, 0.742370, 0.729476, 0.726544, 0.762101, 0.833028, 0.881653, 0.895717, 0.900236, 0.904059, 0.915425, 0.911045, 0.910814, 0.892230, 0.898440, 0.884676, 0.921588, 0.910895, 0.891952, 0.844764, 0.821836, 0.799719, 0.751882, 0.731074, 0.715584, 0.716187, 0.729302, 0.742556, 0.755868, 0.810540, 0.877632, 0.900734, 0.906562, 0.911671, 0.924844, 0.919225, 0.910999, 0.914208, 0.907790, 0.913351, 0.937055, 0.925597, 0.906318, 0.862641, 0.837094, 0.818650, 0.796209, 0.775239, 0.763560, 0.751836, 0.744189, 0.765762, 0.782920, 0.841925, 0.904905, 0.929269, 0.930300, 0.947355, 0.945640, 0.931818, 0.929744, 0.919086, 0.889056, 0.868364, 0.891767, 0.897247, 0.886067, 0.853500, 0.820515, 0.781298, 0.731260, 0.724181, 0.711170, 0.705563, 0.702852, 0.725548, 0.732859, 0.789593, 0.854079, 0.880934, 0.878802, 0.888998, 0.887665, 0.874956, 0.880262, 0.851032, 0.848541, 0.848680, 0.872384, 0.872627, 0.852468, 0.819484, 0.776027, 0.755172, 0.727819, 0.707776, 0.685219, 0.676309, 0.680364, 0.695344, 0.691741, 0.684489, 0.699330, 0.726081, 0.759587, 0.780974, 0.787601, 0.782410, 0.759818, 0.742243, 0.734967, 0.734759, 0.766503, 0.774880, 0.749623, 0.706803, 0.682461, 0.676703, 0.640174, 0.616319, 0.609901, 0.603946, 0.610526, 0.618694, 0.609530, 0.600505, 0.609032, 0.633813],
	arrPP_MW: [],
	arrPS_MW: [],
	arrPW_MW: [],
	arrPPSW_MW: [],
	arrCons_MW: [],
	arrOver_MW: [],
	arrPrice_Kc_per_MWh: [],
	arrAccum_MWh: [],
	arrLost_MW: [],
	arrDeficit_MW: [],
	arrDeficit_hours: [],
	arrBuyed_MWh: [],
	arrBuyed_Kc: [],
	arrSelled_MWh: [],
	arrSelled_Kc: [],

	arrPP_MW_subavg: [],
	arrPS_MW_subavg: [],
	arrPW_MW_subavg: [],
	arrPPSW_MW_subavg: [],
	arrCons_MW_subavg: [],

	arrPrice_Kc_per_MWh_subavg: [],
	arrAccum_MWh_subavg: [],
	arrDeficit_MW_subavg: [],
	
	PP_MW_subavg: 0,
	PS_MW_subavg: 0,
	PW_MW_subavg: 0,
	PPSW_MW_subavg: 0,
	Cons_MW_subavg: 0,

	Price_Kc_per_MWh_subavg: 0,
	Accum_MWh_subavg: 0,
	Deficit_MW_subavg: 0,

	Power_MW_subavg_max: 0,
	
	Price_Kc_per_MWh_subavg_max: 0,
	Accum_MWh_subavg_max: 0,
	Deficit_MW_subavg_max: 0,
	
	avgPP_MW: 0,
	maxPP_MW: -Infinity,
	minPP_MW: Infinity,
	sumPP_MW: 0,
	
	avgPS_MW: 0,
	maxPS_MW: -Infinity,
	minPS_MW: Infinity,
	sumPS_MW: 0,
	
	avgPW_MW: 0,
	maxPW_MW: -Infinity,
	minPW_MW: Infinity,
	sumPW_MW: 0,
	
	avgPPSW_MW: 0,
	maxPPSW_MW: -Infinity,
	minPPSW_MW: Infinity,
	sumPPSW_MW: 0,
	
	avgCons_MW: 0,
	maxCons_MW: -Infinity,
	minCons_MW: Infinity,
	sumCons_MW: 0,
	
	avgOver_MW: 0,
	maxOver_MW: -Infinity,
	minOver_MW: Infinity,
	sumOver_MW: 0,
	
	avgPrice_Kc_per_MWh: 0,
	maxPrice_Kc_per_MWh: -Infinity,
	minPrice_Kc_per_MWh: Infinity,
	sumPrice_Kc_per_MWh: 0,
	
	avgAccum_MWh: 0,
	maxAccum_MWh: -Infinity,
	minAccum_MWh: Infinity,
	sumAccum_MWh: 0,
	
	avgLost_MW: 0,
	maxLost_MW: -Infinity,
	minLost_MW: Infinity,
	sumLost_MW: 0,
	
	avgDeficit_MW: 0,
	maxDeficit_MW: -Infinity,
	minDeficit_MW: Infinity,
	sumDeficit_MW: 0,
	
	avgDeficit_hours: 0,
	maxDeficit_hours: -Infinity,
	minDeficit_hours: Infinity,
	sumDeficit_hours: 0,
	
	avgBuyed_MWh: 0,
	maxBuyed_MWh: -Infinity,
	minBuyed_MWh: Infinity,
	sumBuyed_MWh: 0,
	
	avgBuyed_Kc: 0,
	maxBuyed_Kc: -Infinity,
	minBuyed_Kc: Infinity,
	sumBuyed_Kc: 0,
	
	avgSelled_MWh: 0,
	maxSelled_MWh: -Infinity,
	minSelled_MWh: Infinity,
	sumSelled_MWh: 0,
	
	avgSelled_Kc: 0,
	maxSelled_Kc: -Infinity,
	minSelled_Kc: Infinity,
	sumSelled_Kc: 0,
	
	importInput: function() {
		this.permPower_MW = acumInpOut.in_permPower_MW;
		this.maxPeakSolar_MW = acumInpOut.in_maxPeakSolar_MW;
		this.maxPeakWind_MW = acumInpOut.in_maxPeakWind_MW;
		this.cons_MW = acumInpOut.in_cons_MW;

		this.totalCap_Days = acumInpOut.in_totalCap_Days;
		this.totalCap_MWh = acumInpOut.in_totalCap_MWh;
		this.startCap_Percent = acumInpOut.in_startCap_Percent;
		this.startCap_MWh = acumInpOut.in_startCap_MWh;

		this.priceStorageMWh_Kc = acumInpOut.in_priceStorageMWh_Kc;
		this.priceStorageTotal_Kc = acumInpOut.in_priceStorageTotal_Kc;
		this.storageLifeTime_years = acumInpOut.in_storageLifeTime_years;
		this.priceStoragePerYear_Kc = acumInpOut.in_priceStoragePerYear_Kc;

		this.energyBuyed_Kc = acumInpOut.in_energyBuyed_Kc;
		this.energySelled_Kc = acumInpOut.in_energySelled_Kc;
		this.profitPerYear_Kc = acumInpOut.in_profitPerYear_Kc;
		this.profitPercent = acumInpOut.in_profitPercent;

		this.kWhPriceIncrease_Kc = acumInpOut.in_kWhPriceIncrease_Kc;
		this.MWhPriceProdEqCons_Kc = acumInpOut.in_MWhPriceProdEqCons_Kc;
		this.MWhPriceProdEqZero_Kc = acumInpOut.in_MWhPriceProdEqZero_Kc;
		this.MWhPriceProdEq2Cons_Kc = acumInpOut.in_MWhPriceProdEq2Cons_Kc;
	},
	
	exportOutput: function() {
		acumInpOut.in_permPower_MW = this.permPower_MW;
		acumInpOut.in_maxPeakSolar_MW = this.maxPeakSolar_MW;
		acumInpOut.in_maxPeakWind_MW = this.maxPeakWind_MW;
		acumInpOut.in_cons_MW = this.cons_MW;

		acumInpOut.in_totalCap_Days = this.totalCap_Days;
		acumInpOut.in_totalCap_MWh = this.totalCap_MWh;
		acumInpOut.in_startCap_Percent = this.startCap_Percent;
		acumInpOut.in_startCap_MWh = this.startCap_MWh;

		acumInpOut.in_priceStorageMWh_Kc = this.priceStorageMWh_Kc;
		acumInpOut.in_priceStorageTotal_Kc = this.priceStorageTotal_Kc;
		acumInpOut.in_storageLifeTime_years = this.storageLifeTime_years;
		acumInpOut.in_priceStoragePerYear_Kc = this.priceStoragePerYear_Kc;

		acumInpOut.in_energyBuyed_Kc = this.energyBuyed_Kc;
		acumInpOut.in_energySelled_Kc = this.energySelled_Kc;
		acumInpOut.in_profitPerYear_Kc = this.profitPerYear_Kc;
		acumInpOut.in_profitPercent = this.profitPercent;

		acumInpOut.in_MWhPriceProdEq2Cons_Kc = this.MWhPriceProdEq2Cons_Kc;
		acumInpOut.in_MWhPriceProdEqCons_Kc = this.MWhPriceProdEqCons_Kc;
		acumInpOut.in_MWhPriceProdEqZero_Kc = this.MWhPriceProdEqZero_Kc;

		acumInpOut.in_kWhPriceIncrease_Kc = this.kWhPriceIncrease_Kc;
	},
	
	recalculate: function() {
		
		this.arrPP_MW = [];
		this.arrPS_MW = [];
		this.arrPW_MW = [];
		this.arrPPSW_MW = [];
		this.arrCons_MW = [];
		this.arrOver_MW = [];
		this.arrPrice_Kc_per_MWh = [];
		this.arrAccum_MWh = [];
		this.arrLost_MW = [];
		this.arrDeficit_MW = [];
		this.arrDeficit_hours = [];
		this.arrBuyed_MWh = [];
		this.arrBuyed_Kc = [];
		this.arrSelled_MWh = [];
		this.arrSelled_Kc = [];
		
		this.arrPP_MW_subavg = [];
		this.arrPS_MW_subavg = [];
		this.arrPW_MW_subavg = [];
		this.arrPPSW_MW_subavg= [];
		this.arrCons_MW_subavg = [];

		this.arrPrice_Kc_per_MWh_subavg = [];
		this.arrAccum_MWh_subavg = [];
		this.arrDeficit_MW_subavg = [];
		
		this.PP_MW_subavg = 0;
		this.PS_MW_subavg = 0;
		this.PW_MW_subavg = 0;
		this.PPSW_MW_subavg = 0;
		this.Cons_MW_subavg = 0;

		this.Price_Kc_per_MWh_subavg = 0;
		this.Accum_MWh_subavg = 0;
		this.Deficit_MW_subavg = 0;
		
		this.Power_MW_subavg_max = -Infinity;
		
		this.Price_Kc_per_MWh_subavg_max = -Infinity;
		this.Accum_MWh_subavg_max = -Infinity;
		this.Deficit_MW_subavg_max = -Infinity;

		this.avgPP_MW = 0;
		this.maxPP_MW = -Infinity;
		this.minPP_MW = Infinity;
		this.sumPP_MW = 0;
		
		this.avgPS_MW = 0;
		this.maxPS_MW = -Infinity;
		this.minPS_MW = Infinity;
		this.sumPS_MW = 0;
		
		this.avgPW_MW = 0;
		this.maxPW_MW = -Infinity;
		this.minPW_MW = Infinity;
		this.sumPW_MW = 0;
		
		this.avgPPSW_MW = 0;
		this.maxPPSW_MW = -Infinity;
		this.minPPSW_MW = Infinity;
		this.sumPPSW_MW = 0;
		
		this.avgCons_MW = 0;
		this.maxCons_MW = -Infinity;
		this.minCons_MW = Infinity;
		this.sumCons_MW = 0;
		
		this.avgOver_MW = 0;
		this.maxOver_MW = -Infinity;
		this.minOver_MW = Infinity;
		this.sumOver_MW = 0;
		
		this.avgPrice_Kc_per_MWh = 0;
		this.maxPrice_Kc_per_MWh = -Infinity;
		this.minPrice_Kc_per_MWh = Infinity;
		this.sumPrice_Kc_per_MWh = 0;
		
		this.avgAccum_MWh = 0;
		this.maxAccum_MWh = -Infinity;
		this.minAccum_MWh = Infinity;
		this.sumAccum_MWh = 0;
		
		this.avgLost_MW = 0;
		this.maxLost_MW = -Infinity;
		this.minLost_MW = Infinity;
		this.sumLost_MW = 0;
		
		this.avgDeficit_MW = 0;
		this.maxDeficit_MW = -Infinity;
		this.minDeficit_MW = Infinity;
		this.sumDeficit_MW = 0;
		
		this.avgDeficit_hours = 0;
		this.maxDeficit_hours = -Infinity;
		this.minDeficit_hours = Infinity;
		this.sumDeficit_hours = 0;
		
		this.avgBuyed_MWh = 0;
		this.maxBuyed_MWh = -Infinity;
		this.minBuyed_MWh = Infinity;
		this.sumBuyed_MWh = 0;
		
		this.avgBuyed_Kc = 0;
		this.maxBuyed_Kc = -Infinity;
		this.minBuyed_Kc = Infinity;
		this.sumBuyed_Kc = 0;
		
		this.avgSelled_MWh = 0;
		this.maxSelled_MWh = -Infinity;
		this.minSelled_MWh = Infinity;
		this.sumSelled_MWh = 0;
		
		this.avgSelled_Kc = 0;
		this.maxSelled_Kc = -Infinity;
		this.minSelled_Kc = Infinity;
		this.sumSelled_Kc = 0;
		

		this.totalCap_MWh = 24 * this.totalCap_Days * this.cons_MW;
		this.startCap_MWh = this.totalCap_MWh * this.startCap_Percent / 100;
		
		this.priceStorageTotal_Kc = this.priceStorageMWh_Kc * this.totalCap_MWh;
		this.priceStoragePerYear_Kc = (this.priceStorageTotal_Kc / this.storageLifeTime_years).toFixed(0);
		
		var i = 0;
		
		var cons = 0;
		var over = 0;
		
		var priceProdEq2Cons = this.MWhPriceProdEq2Cons_Kc;
		var priceProdEqCons = this.MWhPriceProdEqCons_Kc;
		var priceProdEqZero = this.MWhPriceProdEqZero_Kc;
		var price = 0;
		
		var accumulatedBef = this.startCap_MWh;
		var accumulatedAft = 0;
		
		var lost = 0;
		var deficit = 0;
		var deficitHours = 0;
		
		var buyedMWh = 0;
		var buyedKc = 0;
		var selledMWh = 0;
		var selledKc = 0;
		
		this.textTabDetArr ="";
		
		
		var j = 5;
		var k = -1;
		var h = 23;
		
		for(i = 0; i < 490; i++){
		
			this.dDatePom = this.dDateStart.setDate(i+1);
			
			this.arrPP_MW.push( this.permPower_MW );
			this.arrPS_MW.push( this.maxPeakSolar_MW * this.arrPS0_MW[i] );
			this.arrPW_MW.push( this.maxPeakWind_MW * this.arrPW0_MW[i] );
			this.arrPPSW_MW.push( this.arrPP_MW[i] + this.arrPS_MW[i] + this.arrPW_MW[i] );
			
			cons = this.cons_MW;
			this.arrCons_MW.push( cons );
			
			over = this.arrPPSW_MW[i] - this.arrCons_MW[i];
			this.arrOver_MW.push( over );
			
			if (over > 0) {
				price = priceProdEqCons - (over / cons) * (priceProdEqCons - priceProdEq2Cons);
			} else {
				price = priceProdEqCons - (over / cons) * (priceProdEqZero - priceProdEqCons);
			};
			
			this.arrPrice_Kc_per_MWh.push( price );
			
			accumulatedAft = accumulatedBef + over;
			
			if ( accumulatedAft > this.totalCap_MWh ) {accumulatedAft = this.totalCap_MWh;}; 
			if ( accumulatedAft < 0 ) {accumulatedAft = 0;};
			
			this.arrAccum_MWh.push( accumulatedAft );
			
			if ( (accumulatedBef + over) < this.totalCap_MWh ) { lost = 0;} else { lost = accumulatedBef + over - this.totalCap_MWh;};
			
			this.arrLost_MW.push( lost );

			if ( (accumulatedBef + over) > 0 ) { deficit = 0;} else { deficit = accumulatedBef + over ;};

			this.arrDeficit_MW.push( deficit );

			if ( deficit < 0 ) { deficitHours ++ ;} else { deficitHours = 0;};

			this.arrDeficit_hours.push( deficitHours );
			
			if ( accumulatedAft > accumulatedBef ) { buyedMWh = accumulatedAft - accumulatedBef;} else { buyedMWh = 0;};
			
			this.arrBuyed_MWh.push( buyedMWh );
			this.arrBuyed_Kc.push( buyedMWh * price);
			
			if ( accumulatedAft < accumulatedBef ) { selledMWh = accumulatedBef - accumulatedAft;} else { selledMWh = 0;};
			
			this.arrSelled_MWh.push( selledMWh );
			this.arrSelled_Kc.push( selledMWh * price);
			
			
			accumulatedBef = accumulatedAft;
			
						
			this.PP_MW_subavg += this.arrPP_MW[i];
			this.PS_MW_subavg += this.arrPS_MW[i];
			this.PW_MW_subavg += this.arrPW_MW[i];
			this.PPSW_MW_subavg += this.arrPPSW_MW[i];
			this.Cons_MW_subavg += cons;

			this.Price_Kc_per_MWh_subavg += price;
			this.Accum_MWh_subavg += accumulatedAft;
			this.Deficit_MW_subavg += deficit;
			
			
				this.arrPP_MW_subavg.push(this.PP_MW_subavg);
				this.arrPS_MW_subavg.push(this.PS_MW_subavg);
				this.arrPW_MW_subavg.push(this.PW_MW_subavg);
				this.arrPPSW_MW_subavg.push(this.PPSW_MW_subavg);
				this.arrCons_MW_subavg.push(this.Cons_MW_subavg);

				this.arrPrice_Kc_per_MWh_subavg.push(this.Price_Kc_per_MWh_subavg);
				this.arrAccum_MWh_subavg.push(this.Accum_MWh_subavg);
				this.arrDeficit_MW_subavg.push(this.Deficit_MW_subavg);
				
				
				if (this.Power_MW_subavg_max < this.PPSW_MW_subavg) {this.Power_MW_subavg_max = this.PPSW_MW_subavg};
				
				if (this.Power_MW_subavg_max < this.Cons_MW_subavg) {this.Power_MW_subavg_max = this.Cons_MW_subavg};
				
				if (this.Price_Kc_per_MWh_subavg_max < this.Price_Kc_per_MWh_subavg) {this.Price_Kc_per_MWh_subavg_max = this.Price_Kc_per_MWh_subavg};
				
				if (this.Accum_MWh_subavg_max < this.Accum_MWh_subavg) {this.Accum_MWh_subavg_max = this.Accum_MWh_subavg};
				
				if (this.Deficit_MW_subavg_max < this.Deficit_MW_subavg) {this.Deficit_MW_subavg_max = this.Deficit_MW_subavg};
								
				this.PP_MW_subavg = 0;
				this.PS_MW_subavg = 0;
				this.PW_MW_subavg = 0;
				this.PPSW_MW_subavg = 0;
				this.Cons_MW_subavg = 0;

				this.Price_Kc_per_MWh_subavg = 0;
				this.Accum_MWh_subavg = 0;
				this.Deficit_MW_subavg = 0;
				
			
			if (this.maxPP_MW < this.arrPP_MW[i]) { this.maxPP_MW = this.arrPP_MW[i] };
			if (this.maxPS_MW < this.arrPS_MW[i]) { this.maxPS_MW = this.arrPS_MW[i] };
			if (this.maxPW_MW < this.arrPW_MW[i]) { this.maxPW_MW = this.arrPW_MW[i] };
			if (this.maxPPSW_MW < this.arrPPSW_MW[i]) { this.maxPPSW_MW = this.arrPPSW_MW[i] };
			if (this.maxCons_MW < this.arrCons_MW[i]) { this.maxCons_MW = this.arrCons_MW[i] };
			if (this.maxOver_MW < this.arrOver_MW[i]) { this.maxOver_MW = this.arrOver_MW[i] };
			if (this.maxPrice_Kc_per_MWh < this.arrPrice_Kc_per_MWh[i]) { this.maxPrice_Kc_per_MWh = this.arrPrice_Kc_per_MWh[i] };
			if (this.maxAccum_MWh < this.arrAccum_MWh[i]) { this.maxAccum_MWh = this.arrAccum_MWh[i] };
			if (this.maxLost_MW < this.arrLost_MW[i]) { this.maxLost_MW = this.arrLost_MW[i] };
			if (this.maxDeficit_MW < this.arrDeficit_MW[i]) { this.maxDeficit_MW = this.arrDeficit_MW[i] };
			if (this.maxDeficit_hours < this.arrDeficit_hours[i]) { this.maxDeficit_hours = this.arrDeficit_hours[i] };
			if (this.maxBuyed_MWh < this.arrBuyed_MWh[i]) { this.maxBuyed_MWh = this.arrBuyed_MWh[i] };
			if (this.maxBuyed_Kc < this.arrBuyed_Kc[i]) { this.maxBuyed_Kc = this.arrBuyed_Kc[i] };
			if (this.maxSelled_MWh < this.arrSelled_MWh[i]) { this.maxSelled_MWh = this.arrSelled_MWh[i] };
			if (this.maxSelled_Kc < this.arrSelled_Kc[i]) { this.maxSelled_Kc = this.arrSelled_Kc[i] };
			
			if (this.minPP_MW > this.arrPP_MW[i]) { this.minPP_MW = this.arrPP_MW[i] };
			if (this.minPS_MW > this.arrPS_MW[i]) { this.minPS_MW = this.arrPS_MW[i] };
			if (this.minPW_MW > this.arrPW_MW[i]) { this.minPW_MW = this.arrPW_MW[i] };
			if (this.minPPSW_MW > this.arrPPSW_MW[i]) { this.minPPSW_MW = this.arrPPSW_MW[i] };
			if (this.minCons_MW > this.arrCons_MW[i]) { this.minCons_MW = this.arrCons_MW[i] };
			if (this.minOver_MW > this.arrOver_MW[i]) { this.minOver_MW = this.arrOver_MW[i] };
			if (this.minPrice_Kc_per_MWh > this.arrPrice_Kc_per_MWh[i]) { this.minPrice_Kc_per_MWh = this.arrPrice_Kc_per_MWh[i] };
			if (this.minAccum_MWh > this.arrAccum_MWh[i]) { this.minAccum_MWh = this.arrAccum_MWh[i] };
			if (this.minLost_MW > this.arrLost_MW[i]) { this.minLost_MW = this.arrLost_MW[i] };
			if (this.minDeficit_MW > this.arrDeficit_MW[i]) { this.minDeficit_MW = this.arrDeficit_MW[i] };
			if (this.minDeficit_hours > this.arrDeficit_hours[i]) { this.minDeficit_hours = this.arrDeficit_hours[i] };
			if (this.minBuyed_MWh > this.arrBuyed_MWh[i]) { this.minBuyed_MWh = this.arrBuyed_MWh[i] };
			if (this.minBuyed_Kc > this.arrBuyed_Kc[i]) { this.minBuyed_Kc = this.arrBuyed_Kc[i] };
			if (this.minSelled_MWh > this.arrSelled_MWh[i]) { this.minSelled_MWh = this.arrSelled_MWh[i] };
			if (this.minSelled_Kc > this.arrSelled_Kc[i]) { this.minSelled_Kc = this.arrSelled_Kc[i] };
			
			this.sumPP_MW += this.arrPP_MW[i];
			this.sumPS_MW += this.arrPS_MW[i];
			this.sumPW_MW += this.arrPW_MW[i];
			this.sumPPSW_MW += this.arrPPSW_MW[i];
			this.sumCons_MW += this.arrCons_MW[i];
			this.sumOver_MW += this.arrOver_MW[i];
			this.sumPrice_Kc_per_MWh += this.arrPrice_Kc_per_MWh[i];
			this.sumAccum_MWh += this.arrAccum_MWh[i];
			this.sumLost_MW += this.arrLost_MW[i];
			this.sumDeficit_MW += this.arrDeficit_MW[i];
			this.sumDeficit_hours += this.arrDeficit_hours[i];
			this.sumBuyed_MWh += this.arrBuyed_MWh[i];
			this.sumBuyed_Kc += this.arrBuyed_Kc[i];
			this.sumSelled_MWh += this.arrSelled_MWh[i];
			this.sumSelled_Kc += this.arrSelled_Kc[i];
			
			this.avgPP_MW = this.sumPP_MW/490;
			this.avgPS_MW = this.sumPS_MW/490;
			this.avgPW_MW = this.sumPW_MW/490;
			this.avgPPSW_MW = this.sumPPSW_MW/490;
			this.avgCons_MW = this.sumCons_MW/490;
			this.avgOver_MW = this.sumOver_MW/490;
			this.avgPrice_Kc_per_MWh = this.sumPrice_Kc_per_MWh/490;
			this.avgAccum_MWh = this.sumAccum_MWh/490;
			this.avgLost_MW = this.sumLost_MW/490;
			this.avgDeficit_MW = this.sumDeficit_MW/490;
			this.avgDeficit_hours = this.sumDeficit_hours/490;
			this.avgBuyed_MWh = this.sumBuyed_MWh/490;
			this.avgBuyed_Kc = this.sumBuyed_Kc/490;
			this.avgSelled_MWh = this.sumSelled_MWh/490;
			this.avgSelled_Kc = this.sumSelled_Kc/490;
			
			h++;
			
			if ( h == 24) {
			
				h = 0;
				
				this.textTabDetArr += this.cteTabHeadArr;
			};
			
			this.textTabDetArr += "<tr>";
			this.textTabDetArr += "<td>"+this.arrDate[i]+"</td><td>"+this.arrPP_MW[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrPS_MW[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrPW_MW[i].toFixed(0)+"</td>"; 
			this.textTabDetArr += "<td>"+this.arrPPSW_MW[i].toFixed(0)+"</td>"; 
			this.textTabDetArr += "<td>"+this.arrCons_MW[i].toFixed(0)+"</td><td>"+this.arrOver_MW[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrPrice_Kc_per_MWh[i].toFixed(0)+"</td><td>"+this.arrAccum_MWh[i].toFixed(0)+"</td><td>"+this.arrLost_MW[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrDeficit_MW[i].toFixed(0)+"</td><td>"+this.arrDeficit_hours[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrBuyed_MWh[i].toFixed(0)+"</td><td>"+this.arrBuyed_Kc[i].toFixed(0)+"</td>";
			this.textTabDetArr += "<td>"+this.arrSelled_MWh[i].toFixed(0)+"</td><td>"+this.arrSelled_Kc[i].toFixed(0)+"</td>";
			this.textTabDetArr += "</tr>";
			
		};
		
		
		
		
		this.textTabAvgDet = "<tr>" + this.cteTabAvgDet;
		this.textTabAvgDet += "<td>"+this.avgPP_MW.toFixed(0)+"</td><td>"+this.avgPS_MW.toFixed(0)+"</td><td>"+this.avgPW_MW.toFixed(0)+"</td>";
		this.textTabAvgDet += "<td>"+this.avgPPSW_MW.toFixed(0)+"</td><td>"+this.avgCons_MW.toFixed(0)+"</td><td>"+this.avgOver_MW.toFixed(0)+"</td>";
		this.textTabAvgDet += "<td>"+this.avgPrice_Kc_per_MWh.toFixed(0)+"</td><td>"+this.avgAccum_MWh.toFixed(0)+"</td><td>"+this.avgLost_MW.toFixed(0)+"</td>";
		this.textTabAvgDet += "<td>"+this.avgDeficit_MW.toFixed(0)+"</td><td>"+this.avgDeficit_hours.toFixed(3)+"</td>";
		this.textTabAvgDet += "<td>"+this.avgBuyed_MWh.toFixed(0)+"</td><td>"+this.avgBuyed_Kc.toFixed(0)+"</td>";
		this.textTabAvgDet += "<td>"+this.avgSelled_MWh.toFixed(0)+"</td><td>"+this.avgSelled_Kc.toFixed(0)+"</td>";
		this.textTabAvgDet += "</tr>";
		
		this.textTabMaxDet = "<tr>" + this.cteTabMaxDet;
		this.textTabMaxDet += "<td>"+this.maxPP_MW.toFixed(0)+"</td><td>"+this.maxPS_MW.toFixed(0)+"</td><td>"+this.maxPW_MW.toFixed(0)+"</td>";
		this.textTabMaxDet += "<td>"+this.maxPPSW_MW.toFixed(0)+"</td><td>"+this.maxCons_MW.toFixed(0)+"</td><td>"+this.maxOver_MW.toFixed(0)+"</td>";
		this.textTabMaxDet += "<td>"+this.maxPrice_Kc_per_MWh.toFixed(0)+"</td><td>"+this.maxAccum_MWh.toFixed(0)+"</td><td>"+this.maxLost_MW.toFixed(0)+"</td>";
		this.textTabMaxDet += "<td>"+this.maxDeficit_MW.toFixed(0)+"</td><td>"+this.maxDeficit_hours.toFixed(0)+"</td>";
		this.textTabMaxDet += "<td>"+this.maxBuyed_MWh.toFixed(0)+"</td><td>"+this.maxBuyed_Kc.toFixed(0)+"</td>";
		this.textTabMaxDet += "<td>"+this.maxSelled_MWh.toFixed(0)+"</td><td>"+this.maxSelled_Kc.toFixed(0)+"</td>";
		this.textTabMaxDet += "</tr>";
		
		this.textTabMinDet = "<tr>" + this.cteTabMinDet;
		this.textTabMinDet += "<td>"+this.minPP_MW.toFixed(0)+"</td><td>"+this.minPS_MW.toFixed(0)+"</td><td>"+this.minPW_MW.toFixed(0)+"</td>";
		this.textTabMinDet += "<td>"+this.minPPSW_MW.toFixed(0)+"</td><td>"+this.minCons_MW.toFixed(0)+"</td><td>"+this.minOver_MW.toFixed(0)+"</td>";
		this.textTabMinDet += "<td>"+this.minPrice_Kc_per_MWh.toFixed(0)+"</td><td>"+this.minAccum_MWh.toFixed(0)+"</td><td>"+this.minLost_MW.toFixed(0)+"</td>";
		this.textTabMinDet += "<td>"+this.minDeficit_MW.toFixed(0)+"</td><td>"+this.minDeficit_hours.toFixed(0)+"</td>";
		this.textTabMinDet += "<td>"+this.minBuyed_MWh.toFixed(0)+"</td><td>"+this.minBuyed_Kc.toFixed(0)+"</td>";
		this.textTabMinDet += "<td>"+this.minSelled_MWh.toFixed(0)+"</td><td>"+this.minSelled_Kc.toFixed(0)+"</td>";
		this.textTabMinDet += "</tr>";
		
		this.textTabSumDet = "<tr>" + this.cteTabSumDet;
		this.textTabSumDet += "<td>"+this.sumPP_MW.toFixed(0)+"</td><td>"+this.sumPS_MW.toFixed(0)+"</td><td>"+this.sumPW_MW.toFixed(0)+"</td>";
		this.textTabSumDet += "<td>"+this.sumPPSW_MW.toFixed(0)+"</td><td>"+this.sumCons_MW.toFixed(0)+"</td><td>"+this.sumOver_MW.toFixed(0)+"</td>";
		this.textTabSumDet += "<td>nedef.</td><td>nedef.</td><td>"+this.sumLost_MW.toFixed(0)+"</td>";
		this.textTabSumDet += "<td>"+this.sumDeficit_MW.toFixed(0)+"</td><td>nedef.</td>";
		this.textTabSumDet += "<td>"+this.sumBuyed_MWh.toFixed(0)+"</td><td>"+this.sumBuyed_Kc.toFixed(0)+"</td>";
		this.textTabSumDet += "<td>"+this.sumSelled_MWh.toFixed(0)+"</td><td>"+this.sumSelled_Kc.toFixed(0)+"</td>";
		this.textTabSumDet += "</tr>";
		
		this.energyBuyed_Kc = this.sumBuyed_Kc.toFixed(0);
		this.energySelled_Kc = this.sumSelled_Kc.toFixed(0);
		this.profitPerYear_Kc = (this.energySelled_Kc - this.energyBuyed_Kc).toFixed(0);
		this.profitPercent = (100 * this.profitPerYear_Kc / this.priceStoragePerYear_Kc ).toFixed(2);
		
		this.kWhPriceIncrease_Kc = (this.priceStoragePerYear_Kc / (1000 * this.sumCons_MW)).toFixed(2);

	}, /* end of function recalculate */
	
	refreshTab: function() {
		document.getElementById("tab1").innerHTML = this.cteTabAvgHead + this.textTabAvgDet + this.textTabMaxDet + this.textTabMinDet + this.textTabSumDet + this.textTabDetArr ;
	} /* end of function refreshTab */
		
}; 

acumInpOut.initInput();
acumInpOut.refreshPage();

